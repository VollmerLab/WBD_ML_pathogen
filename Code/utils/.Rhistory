as_tibble() %>%
mutate(pct_var = vcov / sum(vcov)) %>%
select(grp, pct_var) %>%
pivot_wider(names_from = 'grp',
values_from = 'pct_var') %>%
select(-Residual) %>%
rename_with(~str_c('pct_', .)),
emmeans(model, ~health | (exp_dis + exp_hea)) %>%
contrast('revpairwise') %>%
broom::tidy(conf.int = TRUE) %>%
filter(!(exp_dis == 1 & exp_hea == 1)) %>%
mutate(time = if_else(exp_dis == 0 & exp_hea == 0, 'Before', 'After'),
dose = case_when(exp_dis == 1 ~ 'Disease',
exp_hea == 1 ~ 'Healthy',
TRUE ~ NA_character_)) %>%
select(time, dose, estimate, std.error, p.value)) %>%
mutate(treatment = str_c(time, str_replace_na(dose, ''), sep = '_') %>% str_remove('_$'),
estimate = str_c(round(estimate, 1), round(std.error, 2), sep = '+-'),
p.value = p.adjust(p.value, 'fdr'),
estimate = if_else(p.value < 0.05, str_c(estimate, ' *'), estimate),
.keep = 'unused') %>%
select(-p.value) %>%
pivot_wider(names_from = treatment, values_from = estimate)
library(emmeans)
tank_out <- tank_asv_models %>%
# filter(!asv_id %in% c('ASV700', 'ASV15', 'ASV49')) %>%
rowwise(asv_id) %>%
reframe(summary(model)$varcor %>%
as_tibble() %>%
mutate(pct_var = vcov / sum(vcov)) %>%
select(grp, pct_var) %>%
pivot_wider(names_from = 'grp',
values_from = 'pct_var') %>%
select(-Residual) %>%
rename_with(~str_c('pct_', .)),
emmeans(model, ~health | (exp_dis + exp_hea)) %>%
contrast('revpairwise') %>%
broom::tidy(conf.int = TRUE) %>%
filter(!(exp_dis == 1 & exp_hea == 1)) %>%
mutate(time = if_else(exp_dis == 0 & exp_hea == 0, 'Before', 'After'),
dose = case_when(exp_dis == 1 ~ 'Disease',
exp_hea == 1 ~ 'Healthy',
TRUE ~ NA_character_)) %>%
select(time, dose, estimate, std.error, p.value)) %>%
mutate(treatment = str_c(time, str_replace_na(dose, ''), sep = '_') %>% str_remove('_$'),
estimate = str_c(round(estimate, 1), round(std.error, 2), sep = '+-'),
p.value = p.adjust(p.value, 'fdr'),
estimate = if_else(p.value < 0.05, str_c(estimate, ' *'), estimate),
.keep = 'unused') %>%
select(-p.value) %>%
pivot_wider(names_from = treatment, values_from = estimate)
asv_table <- full_join(ml_model_out,
field_out,
by = 'asv_id') %>%
left_join(tank_out,
by = 'asv_id') %>%
mutate(across(starts_with('pct'), ~scales::percent(., 1))) %>%
select(-statistic, -p.value,
-phylum:-order) %>%
relocate(`2016_W`, .before = `2016_S`) %>%
relocate(`2017_W`, .before = `2017_S`) %>%
rename(Family = family,
Genus = genus,
ID = asv_id) %>%
mutate(across(where(is.character), ~str_replace_all(., '\\+-', ' ± '))) %>%
select(-starts_with('pct'))
asv_table
asv_table <- full_join(ml_model_out,
field_out,
by = 'asv_id') %>%
left_join(tank_out,
by = 'asv_id') %>%
mutate(across(starts_with('pct'), ~scales::percent(., 1))) %>%
select(-statistic, -p.value,
-phylum:-order) %>%
relocate(`2016_W`, .before = `2016_S`) %>%
relocate(`2017_W`, .before = `2017_S`) %>%
rename(Family = family,
Genus = genus,
ID = asv_id) %>%
mutate(across(where(is.character), ~str_replace_all(., '\\+-', ' ± '))) %>%
select(-starts_with('pct')) %>%
select(-MLP:`Random Forest`) %>%
rename('Median Rank' = median_rank)
asv_table <- full_join(ml_model_out,
field_out,
by = 'asv_id') %>%
left_join(tank_out,
by = 'asv_id') %>%
mutate(across(starts_with('pct'), ~scales::percent(., 1))) %>%
select(-statistic, -p.value,
-phylum:-order) %>%
relocate(`2016_W`, .before = `2016_S`) %>%
relocate(`2017_W`, .before = `2017_S`) %>%
rename(Family = family,
Genus = genus,
ID = asv_id) %>%
mutate(across(where(is.character), ~str_replace_all(., '\\+-', ' ± '))) %>%
select(-starts_with('pct')) %>%
select(-MLP:-`Random Forest`) %>%
rename('Median Rank' = median_rank)
asv_table
write_csv(asv_table, '../../Results/Table2_asv_table.csv')
tank_out <- tank_asv_models %>%
# filter(!asv_id %in% c('ASV700', 'ASV15', 'ASV49')) %>%
rowwise(asv_id) %>%
reframe(summary(model)$varcor %>%
as_tibble() %>%
mutate(pct_var = vcov / sum(vcov)) %>%
select(grp, pct_var) %>%
pivot_wider(names_from = 'grp',
values_from = 'pct_var') %>%
select(-Residual) %>%
rename_with(~str_c('pct_', .)),
emmeans(model, ~health | (exp_dis + exp_hea)) %>%
contrast('revpairwise') %>%
broom::tidy(conf.int = TRUE) %>%
filter(!(exp_dis == 1 & exp_hea == 1)) %>%
mutate(time = if_else(exp_dis == 0 & exp_hea == 0, 'Before', 'After'),
dose = case_when(exp_dis == 1 ~ 'Disease',
exp_hea == 1 ~ 'Healthy',
TRUE ~ NA_character_)) %>%
select(time, dose, estimate, std.error, p.value)) %>%
mutate(treatment = str_c(time, str_replace_na(dose, ''), sep = '_') %>% str_remove('_$'),
estimate = str_c(round(estimate, 1), round(std.error, 2), sep = '+-'),
# p.value = p.adjust(p.value, 'fdr'),
estimate = if_else(p.value < 0.05, str_c(estimate, ' *'), estimate),
.keep = 'unused') %>%
select(-p.value) %>%
pivot_wider(names_from = treatment, values_from = estimate)
tank_out <- tank_asv_models %>%
# filter(!asv_id %in% c('ASV700', 'ASV15', 'ASV49')) %>%
rowwise(asv_id) %>%
reframe(summary(model)$varcor %>%
as_tibble() %>%
mutate(pct_var = vcov / sum(vcov)) %>%
select(grp, pct_var) %>%
pivot_wider(names_from = 'grp',
values_from = 'pct_var') %>%
select(-Residual) %>%
rename_with(~str_c('pct_', .)),
emmeans(model, ~health | (exp_dis + exp_hea)) %>%
contrast('revpairwise') %>%
broom::tidy(conf.int = TRUE) %>%
filter(!(exp_dis == 1 & exp_hea == 1)) %>%
mutate(time = if_else(exp_dis == 0 & exp_hea == 0, 'Before', 'After'),
dose = case_when(exp_dis == 1 ~ 'Disease',
exp_hea == 1 ~ 'Healthy',
TRUE ~ NA_character_)) %>%
select(time, dose, estimate, std.error, p.value)) %>%
mutate(treatment = str_c(time, str_replace_na(dose, ''), sep = '_') %>% str_remove('_$'),
estimate = str_c(round(estimate, 1), round(std.error, 2), sep = '+-'),
# p.value = p.adjust(p.value, 'fdr'),
estimate = if_else(p.value < 0.05, str_c(estimate, ' *'), estimate),
.keep = 'unused') %>%
select(-contains('p.value')) %>%
pivot_wider(names_from = treatment, values_from = estimate)
tank_out
field_out <- select(field_asv_models, asv_id, pct_site, tp_contrasts) %>%
unnest(tp_contrasts) %>%
mutate(estimate = str_c(round(estimate, 1), round(SE, 2), sep = '+-'),
# p.value = p.adjust(p.value, 'fdr'),
estimate = if_else(p.value < 0.05, str_c(estimate, ' *'), estimate),
.keep = 'unused') %>%
select(-df, -t.ratio, -contains('p.value')) %>%
pivot_wider(names_from = c(year, season),
values_from = estimate) %>%
relocate(`2017_S`, .after = `2016_W`) %>%
select(-contrast)
asv_table <- full_join(ml_model_out,
field_out,
by = 'asv_id') %>%
left_join(tank_out,
by = 'asv_id') %>%
mutate(across(starts_with('pct'), ~scales::percent(., 1))) %>%
select(-statistic, -p.value,
-phylum:-order) %>%
relocate(`2016_W`, .before = `2016_S`) %>%
relocate(`2017_W`, .before = `2017_S`) %>%
rename(Family = family,
Genus = genus,
ID = asv_id) %>%
mutate(across(where(is.character), ~str_replace_all(., '\\+-', ' ± '))) %>%
select(-starts_with('pct')) %>%
select(-MLP:-`Random Forest`) %>%
rename('Median Rank' = median_rank)
write_csv(asv_table, '../../Results/Table2_asv_table.csv')
asv_table
tank_out
write_csv(asv_table, '../../Results/Table2_asv_table.csv')
tank_asv_models %>%
# filter(!asv_id %in% c('ASV700', 'ASV15', 'ASV49')) %>%
rowwise(asv_id) %>%
reframe(summary(model)$varcor %>%
as_tibble() %>%
mutate(pct_var = vcov / sum(vcov)) %>%
select(grp, pct_var) %>%
pivot_wider(names_from = 'grp',
values_from = 'pct_var') %>%
select(-Residual) %>%
rename_with(~str_c('pct_', .)),
emmeans(model, ~health | (exp_dis + exp_hea)) %>%
contrast('revpairwise') %>%
broom::tidy(conf.int = TRUE) %>%
filter(!(exp_dis == 1 & exp_hea == 1)) %>%
mutate(time = if_else(exp_dis == 0 & exp_hea == 0, 'Before', 'After'),
dose = case_when(exp_dis == 1 ~ 'Disease',
exp_hea == 1 ~ 'Healthy',
TRUE ~ NA_character_)) %>%
select(time, dose, estimate, std.error, p.value))
tank_asv_models %>%
# filter(!asv_id %in% c('ASV700', 'ASV15', 'ASV49')) %>%
rowwise(asv_id) %>%
reframe(summary(model)$varcor %>%
as_tibble() %>%
mutate(pct_var = vcov / sum(vcov)) %>%
select(grp, pct_var) %>%
pivot_wider(names_from = 'grp',
values_from = 'pct_var') %>%
select(-Residual) %>%
rename_with(~str_c('pct_', .)),
emmeans(model, ~health | (exp_dis + exp_hea)) %>%
contrast('revpairwise') %>%
broom::tidy(conf.int = TRUE) %>%
filter(!(exp_dis == 1 & exp_hea == 1)) %>%
mutate(time = if_else(exp_dis == 0 & exp_hea == 0, 'Before', 'After'),
dose = case_when(exp_dis == 1 ~ 'Disease',
exp_hea == 1 ~ 'Healthy',
TRUE ~ NA_character_)) %>%
select(time, dose, estimate, std.error, p.value)) %>%
filter(asv_id %in% c('ASV8', 'ASV30'))
tank_mid <- tank_asv_models %>%
# filter(!asv_id %in% c('ASV700', 'ASV15', 'ASV49')) %>%
rowwise(asv_id) %>%
reframe(summary(model)$varcor %>%
as_tibble() %>%
mutate(pct_var = vcov / sum(vcov)) %>%
select(grp, pct_var) %>%
pivot_wider(names_from = 'grp',
values_from = 'pct_var') %>%
select(-Residual) %>%
rename_with(~str_c('pct_', .)),
emmeans(model, ~health | (exp_dis + exp_hea)) %>%
contrast('revpairwise') %>%
broom::tidy(conf.int = TRUE) %>%
filter(!(exp_dis == 1 & exp_hea == 1)) %>%
mutate(time = if_else(exp_dis == 0 & exp_hea == 0, 'Before', 'After'),
dose = case_when(exp_dis == 1 ~ 'Disease',
exp_hea == 1 ~ 'Healthy',
TRUE ~ NA_character_)) %>%
select(time, dose, estimate, std.error, p.value))
tank_mid
filter(tank_mid, asv_id == 'ASV40')
filter(tank_mid, asv_id == 'ASV40')
filter(tank_mid, asv_id == 'ASV40') %>%
select(time:p.value)
field_out
field_asv_models
#### Random Numbers ####
filter(field_asv_models, asv_id == 'ASV40')
#### Random Numbers ####
filter(field_asv_models, asv_id == 'ASV40') %>%
select(model) %>%
pull(model)
#### Random Numbers ####
filter(field_asv_models, asv_id == 'ASV40') %>%
select(model) %>%
pull(model) %>%
emmeans(~health)
#### Random Numbers ####
filter(field_asv_models, asv_id == 'ASV40') %>%
select(model) %>%
pull(model) %>%
pluck(1) %>%
emmeans(~health)
#### Random Numbers ####
filter(field_asv_models, asv_id == 'ASV40') %>%
select(model) %>%
pull(model) %>%
pluck(1) %>%
emmeans(~health) %>%
contrast('pairwise')
mean(c(-4.3, -3.1, -1.6, -4.3))
field_asv_models
#### Random Numbers ####
filter(field_asv_models, asv_id %in% c('ASV15', 'ASV49', 'ASV700'))
#### Random Numbers ####
filter(field_asv_models, asv_id %in% c('ASV15', 'ASV49', 'ASV700')) %>%
select(asv_id, tp_contrasts) %>%
unnest(tp_contrasts)
#### Random Numbers ####
filter(field_asv_models, asv_id %in% c('ASV15', 'ASV49', 'ASV700')) %>%
select(asv_id, tp_contrasts) %>%
unnest(tp_contrasts) %>%
filter(p.value > 0.05)
taxonomy
filter(taxonomy, asv_id %in% c('ASV15', 'ASV49', 'ASV700', 'ASV40'))
filter(taxonomy, !asv_id %in% c('ASV15', 'ASV49', 'ASV700', 'ASV40'))
ml_model_out
filter(ml_model_out, !asv_id %in% c('ASV15', 'ASV49', 'ASV700', 'ASV40'))
filter(ml_model_out, !asv_id %in% c('ASV15', 'ASV49', 'ASV700', 'ASV40')) %>%
seelct(family, genus)
filter(ml_model_out, !asv_id %in% c('ASV15', 'ASV49', 'ASV700', 'ASV40')) %>%
count(family, genus)
str_c('ASV', c(25, 322, 361, 26, 8))
filter(tank_mid, asv_id %in% str_c('ASV', c(25, 322, 361, 26, 8))) %>%
select(time:p.value)
filter(tank_mid, asv_id %in% str_c('ASV', c(25, 322, 361, 26, 8))) %>%
select(time:p.value) %>%
filter(p.value < 0.05)
filter(tank_mid, asv_id %in% str_c('ASV', c(25, 322, 361, 26, 8))) %>%
select(asv_id, time:p.value) %>%
filter(p.value < 0.05)
filter(taxonomy, asv_id == 'ASV322')
filter(taxonomy, asv_id == 'ASV322') %>%
select(family, genus)
filter(tank_mid, asv_id %in% str_c('ASV', c(25, 322, 361, 26, 8))) %>%
select(asv_id, time:p.value) %>%
filter(p.value < 0.05)
filter(taxonomy, asv_id == 'ASV8') %>%
select(family, genus)
filter(taxonomy, asv_id %in% c('ASV26', 'ASV361', 'ASV25')) %>%
select(family, genus)
filter(taxonomy, asv_id %in% c('ASV26', 'ASV361', 'ASV25')) %>%
select(family, genus, asv_id)
filter(tank_mid, asv_id %in% str_c('ASV', c(25, 322, 361, 26, 8))) %>%
select(asv_id, time:p.value) %>%
filter(p.value < 0.05)
library(tidyverse)
#### Redo with BCLA ####
read_csv('../../intermediate_files/all_asvs.fasta.blca.out')
#### Redo with BCLA ####
read_delim('../../intermediate_files/all_asvs.fasta.blca.out', delim ' \t')
#### Redo with BCLA ####
read_delim('../../intermediate_files/all_asvs.fasta.blca.out', delim = ' \t')
#### Redo with BCLA ####
read_delim('../../intermediate_files/all_asvs.fasta.blca.out', delim = '\t')
#### Redo with BCLA ####
read_delim('../../intermediate_files/all_asvs.fasta.blca.out', delim = '\t',
colnames = c('asv_id', 'taxonom'))
#### Redo with BCLA ####
read_delim('../../intermediate_files/all_asvs.fasta.blca.out', delim = '\t',
col_names = c('asv_id', 'taxonomy'))
#### Redo with BCLA ####
read_delim('../../intermediate_files/all_asvs.fasta.blca.out', delim = '\t',
col_names = c('asv_id', 'taxonomy'), show_col_types = FALSE)
#### Redo with BCLA ####
read_delim('../../intermediate_files/all_asvs.fasta.blca.out', delim = '\t',
col_names = c('asv_id', 'taxonomy'), show_col_types = FALSE)
#### Redo with BCLA ####
read_delim('../../intermediate_files/all_asvs.fasta.blca.out', delim = '\t',
col_names = c('asv_id', 'taxonomy'), show_col_types = FALSE) %>%
mutate(superkingdom = str_extract(taxonomy, 'superkingdom:.*;[0-9\\.]+;'))
#### Redo with BCLA ####
read_delim('../../intermediate_files/all_asvs.fasta.blca.out', delim = '\t',
col_names = c('asv_id', 'taxonomy'), show_col_types = FALSE) %>%
mutate(superkingdom = str_extract(taxonomy, 'superkingdom:.*;[0-9\\.]+;'),
.keep = 'unused')
read_delim('../../intermediate_files/all_asvs.fasta.blca.out', delim = '\t',
col_names = c('asv_id', 'taxonomy'), show_col_types = FALSE) %>%
mutate(superkingdom = str_extract(taxonomy, 'superkingdom:.*;[0-9\\.]+;phylum'),
.keep = 'unused')
read_delim('../../intermediate_files/all_asvs.fasta.blca.out', delim = '\t',
col_names = c('asv_id', 'taxonomy'), show_col_types = FALSE) %>%
mutate(superkingdom = str_extract(taxonomy, 'superkingdom:.*;[0-9\\.]+;phylum'),
phylum = str_extract(taxonomy, 'phylum:.*;[0-9\\.]+;class'),
.keep = 'unused')
read_delim('../../intermediate_files/all_asvs.fasta.blca.out', delim = '\t',
col_names = c('asv_id', 'taxonomy'), show_col_types = FALSE)
read_delim('../../intermediate_files/all_asvs.fasta.blca.out', delim = '\t',
col_names = c('asv_id', 'taxonomy'), show_col_types = FALSE) %>%
mutate(superkingdom = str_extract(taxonomy, 'superkingdom:.*;[0-9\\.]+;phylum'),
phylum = str_extract(taxonomy, 'phylum:.*;[0-9\\.]+;class'),
class = str_extract(taxonomy, 'class:.*;[0-9\\.]+;order'),
order = str_extract(taxonomy, 'order:.*;[0-9\\.]+;family'),
family = str_extract(taxonomy, 'family:.*;[0-9\\.]+;genus'),
genus = str_extract(taxonomy, 'genus:.*;[0-9\\.]+;species'),
species = str_extract(taxonomy, 'species:.*;[0-9\\.]+'),
.keep = 'unused')
read_delim('../../intermediate_files/all_asvs.fasta.blca.out', delim = '\t',
col_names = c('asv_id', 'taxonomy'), show_col_types = FALSE) %>%
mutate(superkingdom = str_extract(taxonomy, 'superkingdom:.*;[0-9\\.]+;phylum') %>% str_remove_all('superkingdom:|;phylum'),
phylum = str_extract(taxonomy, 'phylum:.*;[0-9\\.]+;class'),
class = str_extract(taxonomy, 'class:.*;[0-9\\.]+;order'),
order = str_extract(taxonomy, 'order:.*;[0-9\\.]+;family'),
family = str_extract(taxonomy, 'family:.*;[0-9\\.]+;genus'),
genus = str_extract(taxonomy, 'genus:.*;[0-9\\.]+;species'),
species = str_extract(taxonomy, 'species:.*;[0-9\\.]+'),
.keep = 'unused')
read_delim('../../intermediate_files/all_asvs.fasta.blca.out', delim = '\t',
col_names = c('asv_id', 'taxonomy'), show_col_types = FALSE) %>%
mutate(superkingdom = str_extract(taxonomy, 'superkingdom:.*;[0-9\\.]+;phylum') %>% str_remove_all('superkingdom:|;phylum'),
phylum = str_extract(taxonomy, 'phylum:.*;[0-9\\.]+;class') %>% str_remove_all('phylum:|;class'),
class = str_extract(taxonomy, 'class:.*;[0-9\\.]+;order') %>% str_remove_all('class:|;order'),
order = str_extract(taxonomy, 'order:.*;[0-9\\.]+;family') %>% str_remove_all('order:|;family'),
family = str_extract(taxonomy, 'family:.*;[0-9\\.]+;genus') %>% str_remove_all('family:|;genus'),
genus = str_extract(taxonomy, 'genus:.*;[0-9\\.]+;species') %>% str_remove_all('genus:|;species'),
species = str_extract(taxonomy, 'species:.*;[0-9\\.]+') %>% str_remove_all('species:'),
.keep = 'unused')
read_delim('../../intermediate_files/all_asvs.fasta.blca.out', delim = '\t',
col_names = c('asv_id', 'taxonomy'), show_col_types = FALSE) %>%
mutate(superkingdom = str_extract(taxonomy, 'superkingdom:.*;[0-9\\.]+;phylum') %>% str_remove_all('superkingdom:|;phylum'),
phylum = str_extract(taxonomy, 'phylum:.*;[0-9\\.]+;class') %>% str_remove_all('phylum:|;class'),
class = str_extract(taxonomy, 'class:.*;[0-9\\.]+;order') %>% str_remove_all('class:|;order'),
order = str_extract(taxonomy, 'order:.*;[0-9\\.]+;family') %>% str_remove_all('order:|;family'),
family = str_extract(taxonomy, 'family:.*;[0-9\\.]+;genus') %>% str_remove_all('family:|;genus'),
genus = str_extract(taxonomy, 'genus:.*;[0-9\\.]+;species') %>% str_remove_all('genus:|;species'),
species = str_extract(taxonomy, 'species:.*;[0-9\\.]+') %>% str_remove_all('species:'),
.keep = 'unused') %>% View
read_delim('../../intermediate_files/all_asvs.fasta.blca.out', delim = '\t',
col_names = c('asv_id', 'taxonomy'), show_col_types = FALSE) %>%
mutate(superkingdom = str_extract(taxonomy, 'superkingdom:.*;[0-9\\.]+;phylum') %>% str_remove_all('superkingdom:|;phylum'),
phylum = str_extract(taxonomy, 'phylum:.*;[0-9\\.]+;class') %>% str_remove_all('phylum:|;class'),
class = str_extract(taxonomy, 'class:.*;[0-9\\.]+;order') %>% str_remove_all('class:|;order'),
order = str_extract(taxonomy, 'order:.*;[0-9\\.]+;family') %>% str_remove_all('order:|;family'),
family = str_extract(taxonomy, 'family:.*;[0-9\\.]+;genus') %>% str_remove_all('family:|;genus'),
genus = str_extract(taxonomy, 'genus:.*;[0-9\\.]+;species') %>% str_remove_all('genus:|;species'),
species = str_extract(taxonomy, 'species:.*;[0-9\\.]+') %>% str_remove_all('species:'),
.keep = 'unused')
read_delim('../../intermediate_files/all_asvs.fasta.blca.out', delim = '\t',
col_names = c('asv_id', 'taxonomy'), show_col_types = FALSE) %>%
mutate(superkingdom = str_extract(taxonomy, 'superkingdom:.*;[0-9\\.]+;phylum') %>% str_remove_all('superkingdom:|;phylum'),
phylum = str_extract(taxonomy, 'phylum:.*;[0-9\\.]+;class') %>% str_remove_all('phylum:|;class'),
class = str_extract(taxonomy, 'class:.*;[0-9\\.]+;order') %>% str_remove_all('class:|;order'),
order = str_extract(taxonomy, 'order:.*;[0-9\\.]+;family') %>% str_remove_all('order:|;family'),
family = str_extract(taxonomy, 'family:.*;[0-9\\.]+;genus') %>% str_remove_all('family:|;genus'),
genus = str_extract(taxonomy, 'genus:.*;[0-9\\.]+;species') %>% str_remove_all('genus:|;species'),
species = str_extract(taxonomy, 'species:.*;[0-9\\.]+') %>% str_remove_all('species:'),
.keep = 'unused') %>%
select(asv_id, superkingdom, phylum)
read_delim('../../intermediate_files/all_asvs.fasta.blca.out', delim = '\t',
col_names = c('asv_id', 'taxonomy'), show_col_types = FALSE) %>%
mutate(superkingdom = str_extract(taxonomy, 'superkingdom:.*;[0-9\\.]+;phylum') %>% str_remove_all('superkingdom:|;phylum'),
phylum = str_extract(taxonomy, 'phylum:.*;[0-9\\.]+;class') %>% str_remove_all('phylum:|;class'),
class = str_extract(taxonomy, 'class:.*;[0-9\\.]+;order') %>% str_remove_all('class:|;order'),
order = str_extract(taxonomy, 'order:.*;[0-9\\.]+;family') %>% str_remove_all('order:|;family'),
family = str_extract(taxonomy, 'family:.*;[0-9\\.]+;genus') %>% str_remove_all('family:|;genus'),
genus = str_extract(taxonomy, 'genus:.*;[0-9\\.]+;species') %>% str_remove_all('genus:|;species'),
species = str_extract(taxonomy, 'species:.*;[0-9\\.]+') %>% str_remove_all('species:'),
.keep = 'unused') %>%
select(asv_id, superkingdom, phylum) %>%
mutate(across(-asv_id, ~str_extract(., ';.*$') %>% str_remove(';') %>% parse_number()))
?across
read_delim('../../intermediate_files/all_asvs.fasta.blca.out', delim = '\t',
col_names = c('asv_id', 'taxonomy'), show_col_types = FALSE) %>%
mutate(superkingdom = str_extract(taxonomy, 'superkingdom:.*;[0-9\\.]+;phylum') %>% str_remove_all('superkingdom:|;phylum'),
phylum = str_extract(taxonomy, 'phylum:.*;[0-9\\.]+;class') %>% str_remove_all('phylum:|;class'),
class = str_extract(taxonomy, 'class:.*;[0-9\\.]+;order') %>% str_remove_all('class:|;order'),
order = str_extract(taxonomy, 'order:.*;[0-9\\.]+;family') %>% str_remove_all('order:|;family'),
family = str_extract(taxonomy, 'family:.*;[0-9\\.]+;genus') %>% str_remove_all('family:|;genus'),
genus = str_extract(taxonomy, 'genus:.*;[0-9\\.]+;species') %>% str_remove_all('genus:|;species'),
species = str_extract(taxonomy, 'species:.*;[0-9\\.]+') %>% str_remove_all('species:'),
.keep = 'unused') %>%
select(asv_id, superkingdom, phylum) %>%
mutate(across(-asv_id, ~str_extract(., ';.*$') %>% str_remove(';') %>% parse_number(), .names = '{.col}_confidence'))
read_delim('../../intermediate_files/all_asvs.fasta.blca.out', delim = '\t',
col_names = c('asv_id', 'taxonomy'), show_col_types = FALSE) %>%
mutate(superkingdom = str_extract(taxonomy, 'superkingdom:.*;[0-9\\.]+;phylum') %>% str_remove_all('superkingdom:|;phylum'),
phylum = str_extract(taxonomy, 'phylum:.*;[0-9\\.]+;class') %>% str_remove_all('phylum:|;class'),
class = str_extract(taxonomy, 'class:.*;[0-9\\.]+;order') %>% str_remove_all('class:|;order'),
order = str_extract(taxonomy, 'order:.*;[0-9\\.]+;family') %>% str_remove_all('order:|;family'),
family = str_extract(taxonomy, 'family:.*;[0-9\\.]+;genus') %>% str_remove_all('family:|;genus'),
genus = str_extract(taxonomy, 'genus:.*;[0-9\\.]+;species') %>% str_remove_all('genus:|;species'),
species = str_extract(taxonomy, 'species:.*;[0-9\\.]+') %>% str_remove_all('species:'),
.keep = 'unused') %>%
select(asv_id, superkingdom, phylum) %>%
mutate(across(-asv_id, ~str_extract(., ';.*$') %>% str_remove(';') %>%
parse_number(), .names = '{.col}_confidence'),
across(where(is.character), ~str_remove(., ';.*$')))
read_delim('../../intermediate_files/all_asvs.fasta.blca.out', delim = '\t',
col_names = c('asv_id', 'taxonomy'), show_col_types = FALSE) %>%
mutate(superkingdom = str_extract(taxonomy, 'superkingdom:.*;[0-9\\.]+;phylum') %>% str_remove_all('superkingdom:|;phylum'),
phylum = str_extract(taxonomy, 'phylum:.*;[0-9\\.]+;class') %>% str_remove_all('phylum:|;class'),
class = str_extract(taxonomy, 'class:.*;[0-9\\.]+;order') %>% str_remove_all('class:|;order'),
order = str_extract(taxonomy, 'order:.*;[0-9\\.]+;family') %>% str_remove_all('order:|;family'),
family = str_extract(taxonomy, 'family:.*;[0-9\\.]+;genus') %>% str_remove_all('family:|;genus'),
genus = str_extract(taxonomy, 'genus:.*;[0-9\\.]+;species') %>% str_remove_all('genus:|;species'),
species = str_extract(taxonomy, 'species:.*;[0-9\\.]+') %>% str_remove_all('species:'),
.keep = 'unused') %>%
# select(asv_id, superkingdom, phylum) %>%
mutate(across(-asv_id, ~str_extract(., ';.*$') %>% str_remove(';') %>%
parse_number(), .names = '{.col}_confidence'),
across(where(is.character), ~str_remove(., ';.*$')))
load('~/../Downloads/decipherOut_50pct.RData')
ranks <- c("domain", "phylum", "class", "order", "family", "genus", "species")
new_taxonomy <- t(sapply(ids, function(x) {
m <- match(ranks, x$rank)
taxa <- x$taxon[m]
taxa[startsWith(taxa, "unclassified_")] <- NA
taxa
}))
colnames(new_taxonomy) <- ranks
new_taxonomy
as_tibble(new_taxonomy, rownames = 'asv_id')
new_taxonomy <- read_delim('../../intermediate_files/all_asvs.fasta.blca.out', delim = '\t',
col_names = c('asv_id', 'taxonomy'), show_col_types = FALSE) %>%
mutate(superkingdom = str_extract(taxonomy, 'superkingdom:.*;[0-9\\.]+;phylum') %>% str_remove_all('superkingdom:|;phylum'),
phylum = str_extract(taxonomy, 'phylum:.*;[0-9\\.]+;class') %>% str_remove_all('phylum:|;class'),
class = str_extract(taxonomy, 'class:.*;[0-9\\.]+;order') %>% str_remove_all('class:|;order'),
order = str_extract(taxonomy, 'order:.*;[0-9\\.]+;family') %>% str_remove_all('order:|;family'),
family = str_extract(taxonomy, 'family:.*;[0-9\\.]+;genus') %>% str_remove_all('family:|;genus'),
genus = str_extract(taxonomy, 'genus:.*;[0-9\\.]+;species') %>% str_remove_all('genus:|;species'),
species = str_extract(taxonomy, 'species:.*;[0-9\\.]+') %>% str_remove_all('species:'),
.keep = 'unused') %>%
rename(domain = superkingdom) %>%
# select(asv_id, superkingdom, phylum) %>%
mutate(across(-asv_id, ~str_extract(., ';.*$') %>% str_remove(';') %>%
parse_number(), .names = '{.col}_confidence'),
across(where(is.character), ~str_remove(., ';.*$')))
new_taxonomy
write_csv(new_taxonomy, '../intermediate_files/update_taxonomy.csv')
write_csv(new_taxonomy, '../../intermediate_files/update_taxonomy.csv')
