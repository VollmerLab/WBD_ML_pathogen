legend.text = element_text(colour = 'black', size = 10),
legend.key = element_blank(),
panel.background = element_rect(colour = 'black'),
axis.text = element_text(colour = 'black', size = 10),
axis.title = element_text(colour = 'black', size = 14),
axis.text.y = element_markdown())
#### Tank Plot ####
#Maybe have untested as grey - maybe make them blank
tank_plot <- tank_models %>%
filter(!contrast %in% c('Outcome', 'PostvPreH', 'DHvNH',
'Post (Diseased / Control)',
'Diseased (Post / Pre)')) %>%
mutate(contrast = case_when(contrast == 'Post (Diseased / Healthy)' ~ 'Outcome',
contrast == 'Diseased (Post / Pre)' ~ 'Time',
TRUE ~ contrast),
contrast = factor(contrast, levels = rev(c('Exposure', 'Outcome', 'Field'))),
direction_sig = case_when(!all_sig ~ 'Untested',
fdr > alpha ~ 'Neither',
estimate > 0 ~ 'Diseased',
estimate < 0 ~ 'Healthy'),
direction_sig = factor(direction_sig, levels = c('Healthy', 'Neither', 'Diseased',
'Untested'))) %>%
ggplot(aes(y = taxon_name, x = estimate, shape = contrast, #
fill = direction_sig)) +
geom_vline(xintercept = 0, linetype = 'dashed') +
geom_errorbar(aes(xmin = conf.low, xmax = conf.high),
width = 0.1, position = position_dodge(0.5),
show.legend = FALSE) +
geom_point(position = position_dodge(0.5), show.legend = TRUE) +
geom_label(aes(x = 0, label = if_else(is.na(estimate), 'nt', NA_character_)),
fill = alpha('white', 0.5), label.size = NA) +
guides(fill = guide_legend(override.aes = list(shape = 'circle filled', size = 4)),
shape = guide_legend(override.aes = list(size = 4, fill = 'black'))) +
scale_x_continuous(limits = c(-7, 12), breaks = c(-5, 0, 5)) +
scale_fill_manual(values = set_names(c('white', #'grey50',
wesanderson::wes_palette("Zissou1", 2,
type = "continuous")),
c('Neither', 'Healthy', 'Diseased')),
breaks = c('Diseased', 'Healthy'), drop = FALSE) +
scale_shape_manual(values = c('Field' = 'circle filled',
'Exposure' = 'square filled',
'Outcome' = 'diamond filled'),
breaks = c('Exposure', 'Outcome', 'Field'),
drop = FALSE) +
labs(x = 'Tank log<sub>2</sub>(D/H)',
y = NULL,
fill = 'Disease\nAssociation',
shape = 'Effect') +
theme_classic() +
theme(axis.title.x = element_markdown(),
legend.title = element_text(colour = 'black', size = 14),
legend.text = element_text(colour = 'black', size = 10),
legend.key = element_blank(),
panel.background = element_rect(colour = 'black'),
axis.text = element_text(colour = 'black', size = 10),
axis.title = element_text(colour = 'black', size = 14),
axis.text.y = element_markdown())
#### Combined Plots ####
(rank_plot + shap_plot + field_plot + tank_plot) +
plot_layout(nrow = 1, guides = 'collect', axes = 'collect_y') +
plot_annotation(tag_levels = 'A') &
theme(plot.tag.position = 'topleft',
plot.tag.location = 'panel',
plot.tag = element_text(vjust = 5, size = 16, face = 'bold'),
plot.margin = margin(t = 10),
panel.grid.major.y = element_line(colour = 'black', linetype = 'dotted'))
ggsave('../../Results/Fig5_overview_results.png', height = 7, width = 12)
ggsave('../../Results/Fig5.svg', height = 7, width = 12)
#### Functions ####
read_blca <- function(blca_out){
read_delim(blca_out, delim = '\t',
col_names = c('asv_id', 'taxonomy'), show_col_types = FALSE) %>%
mutate(superkingdom = str_extract(taxonomy, 'superkingdom:.*;[0-9\\.]+;phylum') %>% str_remove_all('superkingdom:|;phylum'),
phylum = str_extract(taxonomy, 'phylum:.*;[0-9\\.]+;class') %>% str_remove_all('phylum:|;class'),
class = str_extract(taxonomy, 'class:.*;[0-9\\.]+;order') %>% str_remove_all('class:|;order'),
order = str_extract(taxonomy, 'order:.*;[0-9\\.]+;family') %>% str_remove_all('order:|;family'),
family = str_extract(taxonomy, 'family:.*;[0-9\\.]+;genus') %>% str_remove_all('family:|;genus'),
genus = str_extract(taxonomy, 'genus:.*;[0-9\\.]+;species') %>% str_remove_all('genus:|;species'),
species = str_extract(taxonomy, 'species:.*;[0-9\\.]+') %>% str_remove_all('species:'),
.keep = 'unused') %>%
rename(domain = superkingdom) %>%
# select(asv_id, superkingdom, phylum) %>%
mutate(across(-asv_id, ~str_extract(., ';.*$') %>% str_remove(';') %>%
parse_number(), .names = '{.col}_confidence'),
across(where(is.character), ~str_remove(., ';.*$')))
}
#### Libraries ####
library(tidyverse)
#### Functions ####
read_blca <- function(blca_out){
read_delim(blca_out, delim = '\t',
col_names = c('asv_id', 'taxonomy'), show_col_types = FALSE) %>%
mutate(superkingdom = str_extract(taxonomy, 'superkingdom:.*;[0-9\\.]+;phylum') %>% str_remove_all('superkingdom:|;phylum'),
phylum = str_extract(taxonomy, 'phylum:.*;[0-9\\.]+;class') %>% str_remove_all('phylum:|;class'),
class = str_extract(taxonomy, 'class:.*;[0-9\\.]+;order') %>% str_remove_all('class:|;order'),
order = str_extract(taxonomy, 'order:.*;[0-9\\.]+;family') %>% str_remove_all('order:|;family'),
family = str_extract(taxonomy, 'family:.*;[0-9\\.]+;genus') %>% str_remove_all('family:|;genus'),
genus = str_extract(taxonomy, 'genus:.*;[0-9\\.]+;species') %>% str_remove_all('genus:|;species'),
species = str_extract(taxonomy, 'species:.*;[0-9\\.]+') %>% str_remove_all('species:'),
.keep = 'unused') %>%
rename(domain = superkingdom) %>%
# select(asv_id, superkingdom, phylum) %>%
mutate(across(-asv_id, ~str_extract(., ';.*$') %>% str_remove(';') %>%
parse_number(), .names = '{.col}_confidence'),
across(where(is.character), ~str_remove(., ';.*$')))
}
#### Data ####
panama_taxonomy <- read_blca('../../intermediate_files/all_asvs.fasta.blca.out') %>%
mutate(asv_id = str_c('PA_', asv_id))
rosales_taxonomy <- read_blca('../../intermediate_files/rosales_2019.fasta.blca.out')
panama_taxonomy
taxonomy <- bind_rows(ours = panama_taxonomy,
rosales = rosales_taxonomy,
.id = 'study')
taxonomy
#### Check for cysteniphilum ####
filter(taxonomy, genus == 'Cyst')
#### Check for cysteniphilum ####
filter(taxonomy, genus == 'Cystenephilum')
#### Check for cysteniphilum ####
filter(taxonomy, genus == 'Cysteiniphilum')
#### Check for cysteniphilum ####
filter(taxonomy, genus == 'Cysteiniphilum') %>%
select(-domain:-family, -domain_confidence:-family_confidence)
#### Check for cysteniphilum ####
filter(taxonomy, genus == 'Cysteiniphilum') %>%
select(-domain:-family, -domain_confidence:-family_confidence) %>%
mutate(species = str_remove(species, genus), str_trim)
#### Check for cysteniphilum ####
filter(taxonomy, genus == 'Cysteiniphilum') %>%
select(-domain:-family, -domain_confidence:-family_confidence) %>%
mutate(species = str_remove(species, genus) %>% str_trim)
#### Check for cysteniphilum ####
filter(taxonomy, genus == 'Cysteiniphilum') %>%
select(-domain:-family, -domain_confidence:-family_confidence) %>%
mutate(species = str_remove(species, genus) %>% str_trim,
species = str_c(genus, ' (', genus_confidence, ') ',
species, ' (', species_confidence, ')'))
#### Check for cysteniphilum ####
filter(taxonomy, genus == 'Cysteiniphilum') %>%
select(-domain:-family, -domain_confidence:-family_confidence) %>%
mutate(species = str_remove(species, genus) %>% str_trim,
species = str_c(genus, ' (', genus_confidence, ') ',
species, ' (', species_confidence, ')'),
.keep = 'unused')
#### Check for cysteniphilum ####
filter(taxonomy, genus == 'Cysteiniphilum') %>%
select(-domain:-family, -domain_confidence:-family_confidence) %>%
mutate(species = str_remove(species, genus) %>% str_trim,
species = str_c(genus, ' (', scales::percent(genus_confidence), ') ',
species, ' (', scales::percent(species_confidence), ')'),
.keep = 'unused')
#### Check for cysteniphilum ####
filter(taxonomy, genus == 'Cysteiniphilum') %>%
select(-domain:-family, -domain_confidence:-family_confidence) %>%
mutate(species = str_remove(species, genus) %>% str_trim,
species = str_c(genus, ' (', scales::percent(genus_confidence, scale = 1), ') ',
species, ' (', scales::percent(species_confidence, scale = 1), ')'),
.keep = 'unused')
?scales::percent
#### Check for cysteniphilum ####
filter(taxonomy, genus == 'Cysteiniphilum') %>%
select(-domain:-family, -domain_confidence:-family_confidence) %>%
mutate(species = str_remove(species, genus) %>% str_trim,
species = str_c(genus, ' (', scales::percent(genus_confidence, scale = 1, accuracy = 1), ') ',
species, ' (', scales::percent(species_confidence, scale = 1, accuracy = 1), ')'),
.keep = 'unused')
#### Check for cysteniphilum ####
filter(taxonomy, genus == 'Cysteiniphilum') %>%
select(-domain:-family, -domain_confidence:-family_confidence) %>%
mutate(species = str_remove(species, genus) %>% str_trim,
species = str_c(genus, ' (', scales::percent(genus_confidence, scale = 1, accuracy = 1, suffix = ''), ') ',
species, ' (', scales::percent(species_confidence, scale = 1, accuracy = 1, suffix = ''), ')'),
.keep = 'unused')
#### Check for cysteniphilum ####
filter(taxonomy, genus == 'Cysteiniphilum') %>%
select(-domain:-family, -domain_confidence:-family_confidence) %>%
mutate(species = str_remove(species, genus) %>% str_trim,
general_species = str_c(genus, species, sep = ' '),
species = str_c(genus, ' (', scales::percent(genus_confidence, scale = 1, accuracy = 1, suffix = ''), ') ',
species, ' (', scales::percent(species_confidence, scale = 1, accuracy = 1, suffix = ''), ')'),
.keep = 'unused') %>%
group
filter(taxonomy, genus == 'Cysteiniphilum') %>%
select(-domain:-family, -domain_confidence:-family_confidence) %>%
mutate(species = str_remove(species, genus) %>% str_trim,
general_species = str_c(genus, species, sep = ' '),
species = str_c(genus, ' (', scales::percent(genus_confidence, scale = 1, accuracy = 1, suffix = ''), ') ',
species, ' (', scales::percent(species_confidence, scale = 1, accuracy = 1, suffix = ''), ')'),
.keep = 'unused')
#### Check for cysteniphilum ####
filter(taxonomy, genus == 'Cysteiniphilum') %>%
select(-domain:-family, -domain_confidence:-family_confidence) %>%
mutate(species = str_remove(species, genus) %>% str_trim,
general_species = str_c(genus, species, sep = ' '),
species = str_c(genus, ' (', scales::percent(genus_confidence, scale = 1, accuracy = 1, suffix = ''), ') ',
species, ' (', scales::percent(species_confidence, scale = 1, accuracy = 1, suffix = ''), ')'),
.keep = 'unused') %>%
group_by(study, general_species) %>%
summarise(n = n())
top_asvs <- read_csv('../../Results/Table45_asv_table.csv',
show_col_types = FALSE) %>%
filter(likely_type != '-') %>%
select(ID, likely_type) %>%
filter(likely_type == 'Pathogen') %>%
select(ID) %>%
dplyr::rename(asv_id = ID) %>%
mutate(asv_id = str_c('PA_', asv_id))
top_asvs
read_csv('../../Results/Table45_asv_table.csv',
show_col_types = FALSE)
#### Check for cysteniphilum ####
filter(taxonomy, genus == 'Cysteiniphilum') %>%
select(-domain:-family, -domain_confidence:-family_confidence) %>%
mutate(species = str_remove(species, genus) %>% str_trim,
general_species = str_c(genus, species, sep = ' '),
species = str_c(genus, ' (', scales::percent(genus_confidence, scale = 1, accuracy = 1, suffix = ''), ') ',
species, ' (', scales::percent(species_confidence, scale = 1, accuracy = 1, suffix = ''), ')'),
.keep = 'unused')
#### Data ####
panama_taxonomy <- read_blca('../../intermediate_files/all_asvs.fasta.blca.out')
rosales_taxonomy <- read_blca('../../intermediate_files/rosales_2019.fasta.blca.out')
taxonomy <- bind_rows(ours = panama_taxonomy,
rosales = rosales_taxonomy,
.id = 'study')
#### Check for cysteniphilum ####
filter(taxonomy, genus == 'Cysteiniphilum') %>%
select(-domain:-family, -domain_confidence:-family_confidence) %>%
mutate(species = str_remove(species, genus) %>% str_trim,
general_species = str_c(genus, species, sep = ' '),
species = str_c(genus, ' (', scales::percent(genus_confidence, scale = 1, accuracy = 1, suffix = ''), ') ',
species, ' (', scales::percent(species_confidence, scale = 1, accuracy = 1, suffix = ''), ')'),
.keep = 'unused')
panama_sequences <- read_rds('../../intermediate_files/prepped_microbiome.rds.gz') %>%
refseq
#### Libraries ####
library(Biostrings)
library(msa)
library(phyloseq)
library(tidyverse)
panama_sequences <- read_rds('../../intermediate_files/prepped_microbiome.rds.gz') %>%
refseq
rosales_sequences <- readDNAStringSet('../../intermediate_files/rosales_2019.fasta')
panama_sequences
rosales_sequences
all_sequences <- c(panama_sequences, rosales_sequences)
all_sequences
#### Check for cysteniphilum ####
the_cyst <- filter(taxonomy, genus == 'Cysteiniphilum') %>%
select(-domain:-family, -domain_confidence:-family_confidence) %>%
mutate(species = str_remove(species, genus) %>% str_trim,
general_species = str_c(genus, species, sep = ' '),
species = str_c(genus, ' (', scales::percent(genus_confidence, scale = 1, accuracy = 1, suffix = ''), ') ',
species, ' (', scales::percent(species_confidence, scale = 1, accuracy = 1, suffix = ''), ')'),
.keep = 'unused')
#### Check for cysteniphilum ####
the_target <- filter(taxonomy, genus == 'Cysteiniphilum') %>%
select(-domain:-family, -domain_confidence:-family_confidence) %>%
mutate(species = str_remove(species, genus) %>% str_trim,
general_species = str_c(genus, species, sep = ' '),
species = str_c(genus, ' (', scales::percent(genus_confidence, scale = 1, accuracy = 1, suffix = ''), ') ',
species, ' (', scales::percent(species_confidence, scale = 1, accuracy = 1, suffix = ''), ')'),
.keep = 'unused')
#### Check for cysteniphilum ####
the_targets <- filter(taxonomy, genus == 'Cysteiniphilum') %>%
select(-domain:-family, -domain_confidence:-family_confidence) %>%
mutate(species = str_remove(species, genus) %>% str_trim,
general_species = str_c(genus, species, sep = ' '),
species = str_c(genus, ' (', scales::percent(genus_confidence, scale = 1, accuracy = 1, suffix = ''), ') ',
species, ' (', scales::percent(species_confidence, scale = 1, accuracy = 1, suffix = ''), ')'),
.keep = 'unused')
the_targets%>%
group_by(study, general_species) %>%
summarise(n = n())
the_targets %>%
group_by(study, general_species) %>%
summarise(n = n(),
.groups = 'drop')
the_targets$asv_id
all_sequences[the_targets$asv_id]
#
aligned_subset <- msa(all_sequences[the_targets$asv_id], verbose = TRUE)
aligned_subset
aligned_subset %>%
as.character() %>%
as_dna()
library(bioseq)
aligned_subset %>%
as.character() %>%
as_dna()
aligned_subset %>%
as.character() %>%
as_dna() %>%
enframe()
dist(aligned_subset)
?Biostrings::stringDist()
?stringDist
stringDist(aligned_subset)
msa::msaConvert(aligned_subset, type = 'DNAbin')
msa::msaConvert(aligned_subset, type = 'ape::DNAbin')
msa::msaConvert(aligned_subset, type = 'ape::DNAbin') %>%
dist()
msa::msaConvert(aligned_subset, type = 'ape::DNAbin') %>%
dist(diag = TRUE, upper = TRUE)
?ape::dist.dna
msa::msaConvert(aligned_subset, type = 'ape::DNAbin') %>%
dist(diag = TRUE, upper = TRUE, model = 'N')
msa::msaConvert(aligned_subset, type = 'ape::DNAbin') %>%
dist.dna(diag = TRUE, upper = TRUE, model = 'N')
msa::msaConvert(aligned_subset, type = 'ape::DNAbin') %>%
ape::dist.dna(diag = TRUE, upper = TRUE, model = 'N')
msa::msaConvert(aligned_subset, type = 'ape::DNAbin') %>%
ape::dist.dna( model = 'N')
msa::msaConvert(aligned_subset, type = 'ape::DNAbin') %>%
ape::dist.dna(model = 'N') %>%
as_tibble
msa::msaConvert(aligned_subset, type = 'ape::DNAbin') %>%
ape::dist.dna(model = 'N') %>%
as.data.frame
msa::msaConvert(aligned_subset, type = 'ape::DNAbin') %>%
ape::dist.dna(model = 'N') %>%
as.matrix
msa::msaConvert(aligned_subset, type = 'ape::DNAbin') %>%
ape::dist.dna(model = 'N') %>%
as.matrix %>%
as_tibble(rownames = 'asv_id')
msa::msaConvert(aligned_subset, type = 'ape::DNAbin') %>%
ape::dist.dna(model = 'N') %>%
as.matrix %>%
as_tibble(rownames = 'asv_id1') %>%
pivot_longer(cols = -asv_id1,
names_to = 'asv_id2',
values_to = 'n_differences')
msa::msaConvert(aligned_subset, type = 'ape::DNAbin') %>%
ape::dist.dna(model = 'N') %>%
as.matrix %>%
as_tibble(rownames = 'asv_id1') %>%
pivot_longer(cols = -asv_id1,
names_to = 'asv_id2',
values_to = 'n_differences') %>%
mutate(study1 = if_else(str_detect(asv_id1, 'ASV'), 'ours', 'rosales'),
study2 = if_else(str_detect(asv_id2, 'ASV'), 'ours', 'rosales'),)
msa::msaConvert(aligned_subset, type = 'ape::DNAbin') %>%
ape::dist.dna(model = 'N') %>%
as.matrix %>%
as_tibble(rownames = 'asv_id1') %>%
pivot_longer(cols = -asv_id1,
names_to = 'asv_id2',
values_to = 'n_differences') %>%
mutate(study1 = if_else(str_detect(asv_id1, 'ASV'), 'ours', 'rosales'),
study2 = if_else(str_detect(asv_id2, 'ASV'), 'ours', 'rosales')) %>%
filter(study1 != study2)
msa::msaConvert(aligned_subset, type = 'ape::DNAbin') %>%
ape::dist.dna(model = 'N') %>%
as.matrix %>%
as_tibble(rownames = 'asv_id1') %>%
pivot_longer(cols = -asv_id1,
names_to = 'asv_id2',
values_to = 'n_differences') %>%
mutate(study1 = if_else(str_detect(asv_id1, 'ASV'), 'ours', 'rosales'),
study2 = if_else(str_detect(asv_id2, 'ASV'), 'ours', 'rosales')) %>%
filter(study1 != study2) %>%
arrange(n_differences)
the_targets
select(the_targets, asv_id, species)
msa::msaConvert(aligned_subset, type = 'ape::DNAbin') %>%
ape::dist.dna(model = 'N') %>%
as.matrix %>%
as_tibble(rownames = 'asv_id1') %>%
pivot_longer(cols = -asv_id1,
names_to = 'asv_id2',
values_to = 'n_differences') %>%
mutate(study1 = if_else(str_detect(asv_id1, 'ASV'), 'ours', 'rosales'),
study2 = if_else(str_detect(asv_id2, 'ASV'), 'ours', 'rosales')) %>%
left_join(select(the_targets, asv_id, species) %>%
rename(species1 = species),
by = c('asv_id1' = 'asv_id')) %>%
left_join(select(the_targets, asv_id, species) %>%
rename(species2 = species),
by = c('asv_id2' = 'asv_id'))
msa::msaConvert(aligned_subset, type = 'ape::DNAbin') %>%
ape::dist.dna(model = 'N') %>%
as.matrix %>%
as_tibble(rownames = 'asv_id1') %>%
pivot_longer(cols = -asv_id1,
names_to = 'asv_id2',
values_to = 'n_differences') %>%
mutate(study1 = if_else(str_detect(asv_id1, 'ASV'), 'ours', 'rosales'),
study2 = if_else(str_detect(asv_id2, 'ASV'), 'ours', 'rosales')) %>%
left_join(select(the_targets, asv_id, species) %>%
rename(species1 = species),
by = c('asv_id1' = 'asv_id'))
msa::msaConvert(aligned_subset, type = 'ape::DNAbin') %>%
ape::dist.dna(model = 'N') %>%
as.matrix %>%
as_tibble(rownames = 'asv_id1') %>%
pivot_longer(cols = -asv_id1,
names_to = 'asv_id2',
values_to = 'n_differences') %>%
mutate(study1 = if_else(str_detect(asv_id1, 'ASV'), 'ours', 'rosales'),
study2 = if_else(str_detect(asv_id2, 'ASV'), 'ours', 'rosales')) %>%
left_join(select(the_targets, asv_id, species) %>%
dplyr::rename(species1 = species),
by = c('asv_id1' = 'asv_id')) %>%
left_join(select(the_targets, asv_id, species) %>%
dplyr::rename(species2 = species),
by = c('asv_id2' = 'asv_id'))
msa::msaConvert(aligned_subset, type = 'ape::DNAbin') %>%
ape::dist.dna(model = 'N') %>%
as.matrix %>%
as_tibble(rownames = 'asv_id1') %>%
pivot_longer(cols = -asv_id1,
names_to = 'asv_id2',
values_to = 'n_differences') %>%
mutate(study1 = if_else(str_detect(asv_id1, 'ASV'), 'ours', 'rosales'),
study2 = if_else(str_detect(asv_id2, 'ASV'), 'ours', 'rosales')) %>%
left_join(select(the_targets, asv_id, species) %>%
dplyr::rename(species1 = species),
by = c('asv_id1' = 'asv_id')) %>%
left_join(select(the_targets, asv_id, species) %>%
dplyr::rename(species2 = species),
by = c('asv_id2' = 'asv_id')) %>%
filter(study1 != study2) %>%
arrange(n_differences)
msa::msaConvert(aligned_subset, type = 'ape::DNAbin') %>%
ape::dist.dna(model = 'N') %>%
as.matrix %>%
as_tibble(rownames = 'asv_id1') %>%
pivot_longer(cols = -asv_id1,
names_to = 'asv_id2',
values_to = 'n_differences') %>%
mutate(study1 = if_else(str_detect(asv_id1, 'ASV'), 'ours', 'rosales'),
study2 = if_else(str_detect(asv_id2, 'ASV'), 'ours', 'rosales')) %>%
left_join(select(the_targets, asv_id, species) %>%
dplyr::rename(species1 = species),
by = c('asv_id1' = 'asv_id')) %>%
left_join(select(the_targets, asv_id, species) %>%
dplyr::rename(species2 = species),
by = c('asv_id2' = 'asv_id')) %>%
filter(study1 != study2) %>%
arrange(n_differences)
msa::msaConvert(aligned_subset, type = 'ape::DNAbin') %>%
ape::dist.dna(model = 'N') %>%
as.matrix %>%
as_tibble(rownames = 'asv_id1') %>%
pivot_longer(cols = -asv_id1,
names_to = 'asv_id2',
values_to = 'n_differences') %>%
mutate(study1 = if_else(str_detect(asv_id1, 'ASV'), 'ours', 'rosales'),
study2 = if_else(str_detect(asv_id2, 'ASV'), 'ours', 'rosales')) %>%
left_join(select(the_targets, asv_id, species) %>%
dplyr::rename(species1 = species),
by = c('asv_id1' = 'asv_id')) %>%
left_join(select(the_targets, asv_id, species) %>%
dplyr::rename(species2 = species),
by = c('asv_id2' = 'asv_id')) %>%
filter(asv_id1 == 'ASV25' | asv_id2 == 'ASV25')
msa::msaConvert(aligned_subset, type = 'ape::DNAbin') %>%
ape::dist.dna(model = 'N') %>%
as.matrix %>%
as_tibble(rownames = 'asv_id1') %>%
pivot_longer(cols = -asv_id1,
names_to = 'asv_id2',
values_to = 'n_differences') %>%
mutate(study1 = if_else(str_detect(asv_id1, 'ASV'), 'ours', 'rosales'),
study2 = if_else(str_detect(asv_id2, 'ASV'), 'ours', 'rosales')) %>%
left_join(select(the_targets, asv_id, species) %>%
dplyr::rename(species1 = species),
by = c('asv_id1' = 'asv_id')) %>%
left_join(select(the_targets, asv_id, species) %>%
dplyr::rename(species2 = species),
by = c('asv_id2' = 'asv_id')) %>%
filter(asv_id1 == 'ASV25' | asv_id2 == 'ASV25',
study1 != study2)
msa::msaConvert(aligned_subset, type = 'ape::DNAbin') %>%
ape::dist.dna(model = 'N') %>%
as.matrix %>%
as_tibble(rownames = 'asv_id1') %>%
pivot_longer(cols = -asv_id1,
names_to = 'asv_id2',
values_to = 'n_differences') %>%
mutate(study1 = if_else(str_detect(asv_id1, 'ASV'), 'ours', 'rosales'),
study2 = if_else(str_detect(asv_id2, 'ASV'), 'ours', 'rosales')) %>%
left_join(select(the_targets, asv_id, species) %>%
dplyr::rename(species1 = species),
by = c('asv_id1' = 'asv_id')) %>%
left_join(select(the_targets, asv_id, species) %>%
dplyr::rename(species2 = species),
by = c('asv_id2' = 'asv_id')) %>%
# filter(asv_id1 == 'ASV25' | asv_id2 == 'ASV25',
#        study1 != study2)
filter(study1 != study2) %>%
arrange(n_differences)
msa::msaConvert(aligned_subset, type = 'ape::DNAbin') %>%
ape::dist.dna(model = 'N') %>%
as.matrix %>%
as_tibble(rownames = 'asv_id1') %>%
pivot_longer(cols = -asv_id1,
names_to = 'asv_id2',
values_to = 'n_differences') %>%
mutate(study1 = if_else(str_detect(asv_id1, 'ASV'), 'ours', 'rosales'),
study2 = if_else(str_detect(asv_id2, 'ASV'), 'ours', 'rosales')) %>%
left_join(select(the_targets, asv_id, species) %>%
dplyr::rename(species1 = species),
by = c('asv_id1' = 'asv_id')) %>%
left_join(select(the_targets, asv_id, species) %>%
dplyr::rename(species2 = species),
by = c('asv_id2' = 'asv_id')) %>%
# filter(asv_id1 == 'ASV25' | asv_id2 == 'ASV25',
#        study1 != study2)
filter(study1 != study2,
n_differences == 0)
