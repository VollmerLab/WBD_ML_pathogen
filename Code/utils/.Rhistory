drop = FALSE) +
labs(x = 'Tank log<sub>2</sub>(D/H)',
y = NULL,
fill = 'Disease\nAssociation',
shape = 'Effect') +
theme_classic() +
theme(axis.title.x = element_markdown(),
legend.title = element_text(colour = 'black', size = 14),
legend.text = element_text(colour = 'black', size = 10),
legend.key = element_blank(),
panel.background = element_rect(colour = 'black'),
axis.text = element_text(colour = 'black', size = 10),
axis.title = element_text(colour = 'black', size = 14),
axis.text.y = element_markdown())
#### Tank Plot ####
#Maybe have untested as grey - maybe make them blank
# tank_plot <-
tank_models %>%
filter(!contrast %in% c('Outcome', 'PostvPreH', 'DHvNH',
'Post (Diseased / Control)',
'Diseased (Post / Pre)')) %>%
mutate(contrast = case_when(contrast == 'Post (Diseased / Healthy)' ~ 'Outcome',
contrast == 'Diseased (Post / Pre)' ~ 'Time',
TRUE ~ contrast),
contrast = factor(contrast, levels = rev(c('Exposure', 'Outcome', 'Field'))),
direction_sig = case_when(!all_sig ~ 'Untested',
fdr > alpha ~ 'Neither',
estimate > 0 ~ 'Diseased',
estimate < 0 ~ 'Healthy'),
direction_sig = factor(direction_sig, levels = c('Healthy', 'Neither', 'Diseased',
'Untested'))) %>%
ggplot(aes(y = asv_id, x = estimate, shape = contrast, #taxon_name
fill = direction_sig)) +
geom_vline(xintercept = 0, linetype = 'dashed') +
geom_errorbar(aes(xmin = conf.low, xmax = conf.high),
width = 0.1, position = position_dodge(0.5),
show.legend = FALSE) +
geom_point(position = position_dodge(0.5), show.legend = TRUE) +
geom_label(aes(x = 0, label = if_else(is.na(estimate), 'nt', NA_character_)),
fill = alpha('white', 0.5), label.size = NA) +
guides(fill = guide_legend(override.aes = list(shape = 'circle filled', size = 4)),
shape = guide_legend(override.aes = list(size = 4, fill = 'black'))) +
scale_x_continuous(limits = c(-7, 12), breaks = c(-5, 0, 5)) +
scale_fill_manual(values = set_names(c('white', #'grey50',
wesanderson::wes_palette("Zissou1", 2,
type = "continuous")),
c('Neither', 'Healthy', 'Diseased')),
breaks = c('Diseased', 'Healthy'), drop = FALSE) +
scale_shape_manual(values = c('Field' = 'circle filled',
'Exposure' = 'square filled',
'Outcome' = 'diamond filled'),
breaks = c('Exposure', 'Outcome', 'Field'),
drop = FALSE) +
labs(x = 'Tank log<sub>2</sub>(D/H)',
y = NULL,
fill = 'Disease\nAssociation',
shape = 'Effect') +
theme_classic() +
theme(axis.title.x = element_markdown(),
legend.title = element_text(colour = 'black', size = 14),
legend.text = element_text(colour = 'black', size = 10),
legend.key = element_blank(),
panel.background = element_rect(colour = 'black'),
axis.text = element_text(colour = 'black', size = 10),
axis.title = element_text(colour = 'black', size = 14),
axis.text.y = element_markdown())
#### Tank Plot ####
#Maybe have untested as grey - maybe make them blank
tank_plot <- tank_models %>%
filter(!contrast %in% c('Outcome', 'PostvPreH', 'DHvNH',
'Post (Diseased / Control)',
'Diseased (Post / Pre)')) %>%
mutate(contrast = case_when(contrast == 'Post (Diseased / Healthy)' ~ 'Outcome',
contrast == 'Diseased (Post / Pre)' ~ 'Time',
TRUE ~ contrast),
contrast = factor(contrast, levels = rev(c('Exposure', 'Outcome', 'Field'))),
direction_sig = case_when(!all_sig ~ 'Untested',
fdr > alpha ~ 'Neither',
estimate > 0 ~ 'Diseased',
estimate < 0 ~ 'Healthy'),
direction_sig = factor(direction_sig, levels = c('Healthy', 'Neither', 'Diseased',
'Untested'))) %>%
ggplot(aes(y = taxon_name, x = estimate, shape = contrast, #
fill = direction_sig)) +
geom_vline(xintercept = 0, linetype = 'dashed') +
geom_errorbar(aes(xmin = conf.low, xmax = conf.high),
width = 0.1, position = position_dodge(0.5),
show.legend = FALSE) +
geom_point(position = position_dodge(0.5), show.legend = TRUE) +
geom_label(aes(x = 0, label = if_else(is.na(estimate), 'nt', NA_character_)),
fill = alpha('white', 0.5), label.size = NA) +
guides(fill = guide_legend(override.aes = list(shape = 'circle filled', size = 4)),
shape = guide_legend(override.aes = list(size = 4, fill = 'black'))) +
scale_x_continuous(limits = c(-7, 12), breaks = c(-5, 0, 5)) +
scale_fill_manual(values = set_names(c('white', #'grey50',
wesanderson::wes_palette("Zissou1", 2,
type = "continuous")),
c('Neither', 'Healthy', 'Diseased')),
breaks = c('Diseased', 'Healthy'), drop = FALSE) +
scale_shape_manual(values = c('Field' = 'circle filled',
'Exposure' = 'square filled',
'Outcome' = 'diamond filled'),
breaks = c('Exposure', 'Outcome', 'Field'),
drop = FALSE) +
labs(x = 'Tank log<sub>2</sub>(D/H)',
y = NULL,
fill = 'Disease\nAssociation',
shape = 'Effect') +
theme_classic() +
theme(axis.title.x = element_markdown(),
legend.title = element_text(colour = 'black', size = 14),
legend.text = element_text(colour = 'black', size = 10),
legend.key = element_blank(),
panel.background = element_rect(colour = 'black'),
axis.text = element_text(colour = 'black', size = 10),
axis.title = element_text(colour = 'black', size = 14),
axis.text.y = element_markdown())
#### Combined Plots ####
(rank_plot + shap_plot + field_plot + tank_plot) +
plot_layout(nrow = 1, guides = 'collect', axes = 'collect_y') +
plot_annotation(tag_levels = 'A') &
theme(plot.tag.position = 'topleft',
plot.tag.location = 'panel',
plot.tag = element_text(vjust = 5, size = 16),
plot.margin = margin(t = 10))
ggsave('../../Results/overview_results.png', height = 7, width = 12)
library(tidyverse)
library(tidymodels)
library(magrittr)
coral_split <- read_rds('../../intermediate_files/coral_split.rds.gz')
field_asvs <- bind_rows(train = analysis(coral_split),
test = assessment(coral_split),
.id = 'train_test')
field_data <- read_csv('../../intermediate_files/normalized_field_asv_counts.csv', show_col_types = FALSE) %>%
select(sample_id, health, year, season, site, dataset) %>%
distinct %>%
left_join(field_asvs %>%
select(train_test, sample_id),
by = 'sample_id')
model_predictions <- list.files('../../Results/model_tuning/metrics/',
pattern = 'prediction.csv.gz$', full.names = TRUE) %>%
tibble(pred_file = .) %>%
mutate(wflow_id = str_extract(pred_file, '[a-zA-Z0-9_]+.csv.gz$') %>%
str_remove('_prediction.csv.gz$')) %>%
rowwise(wflow_id) %>%
reframe(read_csv(pred_file, show_col_types = FALSE)) %>%
select(wflow_id, sample_id, .pred_class)
model_misid_rates <- inner_join(field_data,
model_predictions,
by = 'sample_id') %>%
mutate(correct_id = health == .pred_class) %>%
group_by(wflow_id) %>%
summarise(accuracy = mean(correct_id))
base_rate <- count(field_data, health) %>%
mutate(prop = n/sum(n)) %>%
filter(health == 'H') %>%
pull(prop)
mis_id <- inner_join(field_data,
model_predictions,
by = 'sample_id') %>%
mutate(correct_id = health == .pred_class) %>%
select(-.pred_class) %>%
pivot_wider(names_from = wflow_id,
values_from = correct_id) %>%
select(-base_null, -base_knn, -base_pls) %>%
filter(if_any(starts_with('base'), ~!.)) %>%
rowwise() %>%
mutate(n_model = sum(!c_across(starts_with('base')))) %>%
ungroup
top_asvs <- read_csv('../../Results/Table45_asv_table.csv',
show_col_types = FALSE) %>%
filter(likely_type != '-') %>%
select(ID, likely_type)
mis_id %>%
filter(n_model > 1)
#### Breakdown who is mis ID'd ####
full_join(count(mis_id, health),
count(field_data, health, name = 'total'),
by = 'health') %>%
mutate(not = total - n) %>%
select(-total) %>%
column_to_rownames('health') %T>%
print %>%
chisq.test()
prop.test(c(7,5), n = c(143,270))
full_join(count(mis_id, year),
count(field_data, year, name = 'total'),
by = 'year') %>%
mutate(not = total - n) %>%
select(-total) %>%
column_to_rownames('year') %T>%
print %>%
chisq.test()
full_join(count(mis_id, season),
count(field_data, season, name = 'total'),
by = 'season') %>%
mutate(not = total - n) %>%
select(-total) %>%
column_to_rownames('season') %T>%
print %>%
chisq.test()
full_join(count(mis_id, year, season),
count(field_data, year, season, name = 'total'),
by = c('year', 'season')) %>%
mutate(timepoint = str_c(year, season, sep = '_'),
across(where(is.integer), ~replace_na(., 0L)),
.keep = 'unused') %>%
mutate(not = total - n) %>%
select(-total) %>%
column_to_rownames('timepoint') %T>%
print %>%
# chisq.test()
chisq.posthoc.test::chisq.posthoc.test()
7+3+2
library(tidyverse)
library(magrittr)
library(gespeR)
library(ggdendro)
all_asv_ranks <- read_csv('../../intermediate_files/model_shaps.csv.gz',
show_col_types = FALSE) %>%
group_by(wflow_id, train_test) %>%
mutate(across(ends_with('value'), ~scale(.)[,1])) %>%
ungroup %>%
pivot_longer(cols = starts_with('ASV'),
names_to = c('asv_id', '.value'),
names_pattern = '(.*)_(.*)') %>%
group_by(wflow_id, asv_id) %>%
summarise(shap_importance = mean(abs(shap)),
.groups = 'drop') %>%
pivot_wider(names_from = wflow_id,
values_from = shap_importance) %>%
mutate(across(where(is.numeric), ~rank(-.)))
asv_ranks <- read_csv('../../Results/asv_importance.csv.gz',
show_col_types = FALSE) %>%
rename(base_median = median_rank,
base_model = response) %>%
filter(!is.na(base_model)) %>%
left_join(select(all_asv_ranks, asv_id, base_knn, base_pls, base_null),
by = 'asv_id') %>%
select(asv_id, starts_with('base')) %>%
arrange(base_model)
rbo_permute <- function(r1, r2, ...){
names(r1) <- sample(names(r1))
# names(r2) <- sample(names(r2))
rbo(r1, r2, ...)
}
my_tau <- function(list1, list2, perm = FALSE){
if(perm){
names(list1) <- sample(names(list1))
}
A <- fct_inorder(names(list1))
B <- factor(names(list2), levels = levels(A))
out <- Kendall::Kendall(A, B)
tibble(tau = out$tau, tau_p = out$sl)
}
ranking_similarities <- asv_ranks %>%
pivot_longer(cols = starts_with('base'),
names_to = 'model',
values_to = 'rank',
names_prefix = 'base_') %>%
# filter(rank <= 5) %>%
nest_by(model) %>%
mutate(rank_order = list(data %$%
set_names(rank, asv_id) %>%
sort())) %>%
ungroup %>%
expand(nesting(model.1 = model, rank.1 = rank_order),
nesting(model.2 = model, rank.2 = rank_order)) %>%
rowwise(model.1, model.2) %>%
mutate(#broom::tidy(cor.test(rank.1, rank.2, method = 'kendall')),
my_tau(rank.1, rank.2, perm = FALSE),
# tau_p = mean(c(tau, replicate(10 - 1, my_tau(rank.1, rank.2, perm = TRUE)))),
# across(starts_with('rank'), ~list(.[. < max(.)])),
rbo = rbo(rank.1, rank.2, p = 150/min(length(rank.1), length(rank.2)),
k = min(100, length(rank.1), length(rank.2)), side = 'bottom',
uneven.lengths = FALSE),
rbo_p = mean(c(rbo, replicate(1000 - 1, rbo_permute(rank.1, rank.2, p = 150/min(length(rank.1), length(rank.2)),
k = min(100, length(rank.1), length(rank.2)), side = 'bottom',
uneven.lengths = FALSE))) >= rbo)) %>%
# dplyr::select(-method, -alternative) %>%
ungroup
ranking_similarities
ranking_similarities %>%
select(model.1, model.2, rbo) %>%
filter(!model.1 %in% c('model', 'median'),
!model.2 %in% c('model', 'median')) %>%
filter(!model.1 %in% c('knn', 'pls'),
!model.2 %in% c('knn', 'pls'))
ranking_similarities %>%
select(model.1, model.2, rbo) %>%
filter(!model.1 %in% c('model', 'median'),
!model.2 %in% c('model', 'median')) %>%
filter(!model.1 %in% c('knn', 'pls'),
!model.2 %in% c('knn', 'pls')) %>%
filter(model.1 > model.2)
ranking_similarities %>%
select(model.1, model.2, rbo) %>%
filter(!model.1 %in% c('model', 'median'),
!model.2 %in% c('model', 'median')) %>%
filter(!model.1 %in% c('knn', 'pls'),
!model.2 %in% c('knn', 'pls')) %>%
filter(model.1 > model.2) %>%
filter(model.1 != 'null',
model.2 != 'null')
ranking_similarities %>%
select(model.1, model.2, rbo) %>%
filter(!model.1 %in% c('median'),
!model.2 %in% c('median')) %>%
filter(!model.1 %in% c('knn', 'pls'),
!model.2 %in% c('knn', 'pls')) %>%
filter(model.1 > model.2) %>%
filter(model.1 != 'null',
model.2 != 'null')
ranking_similarities
ranking_similarities %>%
select(model.1, model.2, rbo, rbo_p, tau, tau_p) %>%
filter(!model.1 %in% c('model', 'median'),
!model.2 %in% c('model', 'median')) %>%
filter(!model.1 %in% c('knn', 'pls'),
!model.2 %in% c('knn', 'pls')) %>%
filter(model.1 > model.2) %>%
filter(model.1 != 'null',
model.2 != 'null')
ranking_similarities %>%
select(model.1, model.2, rbo, rbo_p, tau, tau_p) %>%
filter(!model.1 %in% c('model', 'median'),
!model.2 %in% c('model', 'median')) %>%
filter(!model.1 %in% c('knn', 'pls'),
!model.2 %in% c('knn', 'pls')) %>%
filter(model.1 > model.2) %>%
filter(model.1 != 'null',
model.2 != 'null') %>%
summarise(across(c(rbo, tau), c(~mean(.), ~sd(.) / sqrt(n()))))
ranking_similarities %>%
select(model.1, model.2, rbo, rbo_p, tau, tau_p) %>%
filter(!model.1 %in% c('knn', 'pls', 'median'),
!model.2 %in% c('knn', 'pls', 'median')) %>%
filter(model.1 > model.2) %>%
filter(!model.1 %in% c('model'),
!model.2 %in% c('model')) %>%
filter(model.1 != 'null',
model.2 != 'null')
ranking_similarities %>%
select(model.1, model.2, rbo, rbo_p, tau, tau_p) %>%
filter(!model.1 %in% c('knn', 'pls', 'median'),
!model.2 %in% c('knn', 'pls', 'median')) %>%
filter(model.1 > model.2) %>%
filter(model.1 %in% c('model', 'null'))
ranking_similarities %>%
select(model.1, model.2, rbo, rbo_p, tau, tau_p) %>%
filter(!model.1 %in% c('knn', 'pls', 'median'),
!model.2 %in% c('knn', 'pls', 'median')) %>%
filter(model.1 > model.2) %>%
filter(model.1 %in% c('model', 'null')) %>%
group_by(model.1) %>%
summarise(across(c(rbo, tau), c(~mean(.), ~sd(.) / sqrt(n()))))
ranking_similarities %>%
select(model.1, model.2, rbo, rbo_p, tau, tau_p) %>%
filter(!model.1 %in% c('knn', 'pls', 'median'),
!model.2 %in% c('knn', 'pls', 'median')) %>%
filter(model.1 > model.2) %>%
filter(!model.1 %in% c('model'),
!model.2 %in% c('model')) %>%
filter(model.1 != 'null',
model.2 != 'null') %>%
summarise(across(c(rbo, tau), c(~mean(.), ~sd(.) / sqrt(n()))))
ranking_similarities %>%
select(model.1, model.2, rbo, rbo_p, tau, tau_p) %>%
filter(!model.1 %in% c('knn', 'pls', 'median'),
!model.2 %in% c('knn', 'pls', 'median')) %>%
filter(model.1 > model.2) %>%
filter(!model.1 %in% c('model'),
!model.2 %in% c('model')) %>%
filter(model.1 != 'null',
model.2 != 'null')
ranking_similarities %>%
select(model.1, model.2, rbo, rbo_p, tau, tau_p) %>%
filter(!model.1 %in% c('knn', 'pls', 'median'),
!model.2 %in% c('knn', 'pls', 'median')) %>%
filter(model.1 %in% c('null', 'model') |
(model.1 > model.2 &
!model.1 %in% c('null', 'model') &
!model.2 %in% c('null', 'model')))
ranking_similarities %>%
select(model.1, model.2, rbo, rbo_p, tau, tau_p) %>%
filter(!model.1 %in% c('knn', 'pls', 'median'),
!model.2 %in% c('knn', 'pls', 'median')) %>%
filter(model.1 %in% c('null', 'model') |
(model.1 > model.2 &
!model.1 %in% c('null', 'model') &
!model.2 %in% c('null', 'model'))) %>%
mutate(grouping = case_when(model.1 %in% c('null', 'model') ~ model.1,
TRUE ~ 'ML'))
ranking_similarities %>%
select(model.1, model.2, rbo, rbo_p, tau, tau_p) %>%
filter(!model.1 %in% c('knn', 'pls', 'median'),
!model.2 %in% c('knn', 'pls', 'median'),
model.1 != model.2) %>%
filter(model.1 %in% c('null', 'model') |
(model.1 > model.2 &
!model.1 %in% c('null', 'model') &
!model.2 %in% c('null', 'model'))) %>%
mutate(grouping = case_when(model.1 %in% c('null', 'model') ~ model.1,
TRUE ~ 'ML'))
ranking_similarities %>%
select(model.1, model.2, rbo, rbo_p, tau, tau_p) %>%
filter(!model.1 %in% c('knn', 'pls', 'median'),
!model.2 %in% c('knn', 'pls', 'median'),
model.1 != model.2) %>%
filter(model.1 %in% c('null', 'model') |
(model.1 > model.2 &
!model.1 %in% c('null', 'model') &
!model.2 %in% c('null', 'model'))) %>%
filter(model.1 == 'model' & model.2 == 'null' | model.1 == 'null' & model.2 == 'model')
ranking_similarities %>%
select(model.1, model.2, rbo, rbo_p, tau, tau_p) %>%
filter(!model.1 %in% c('knn', 'pls', 'median'),
!model.2 %in% c('knn', 'pls', 'median'),
model.1 != model.2) %>%
filter(model.1 %in% c('null', 'model') |
(model.1 > model.2 &
!model.1 %in% c('null', 'model') &
!model.2 %in% c('null', 'model'))) %>%
filter(!(model.1 == 'model' & model.2 == 'null' | model.1 == 'null' & model.2 == 'model'))
ranking_similarities %>%
select(model.1, model.2, rbo, rbo_p, tau, tau_p) %>%
filter(!model.1 %in% c('knn', 'pls', 'median'),
!model.2 %in% c('knn', 'pls', 'median'),
model.1 != model.2) %>%
filter(model.1 %in% c('null', 'model') |
(model.1 > model.2 &
!model.1 %in% c('null', 'model') &
!model.2 %in% c('null', 'model'))) %>%
filter(!(model.1 == 'model' & model.2 == 'null' | model.1 == 'null' & model.2 == 'model')) %>%
mutate(grouping = case_when(model.1 %in% c('null', 'model') ~ model.1,
TRUE ~ 'ML'))
test_rankings <- ranking_similarities %>%
select(model.1, model.2, rbo, rbo_p, tau, tau_p) %>%
filter(!model.1 %in% c('knn', 'pls', 'median'),
!model.2 %in% c('knn', 'pls', 'median'),
model.1 != model.2) %>%
filter(model.1 %in% c('null', 'model') |
(model.1 > model.2 &
!model.1 %in% c('null', 'model') &
!model.2 %in% c('null', 'model'))) %>%
filter(!(model.1 == 'model' & model.2 == 'null' | model.1 == 'null' & model.2 == 'model')) %>%
mutate(grouping = case_when(model.1 %in% c('null', 'model') ~ model.1,
TRUE ~ 'ML'))
test_rankings <- ranking_similarities %>%
select(model.1, model.2, rbo, rbo_p, tau, tau_p) %>%
filter(!model.1 %in% c('knn', 'pls', 'median'),
!model.2 %in% c('knn', 'pls', 'median'),
model.1 != model.2) %>%
filter(model.1 %in% c('null', 'model') |
(model.1 > model.2 &
!model.1 %in% c('null', 'model') &
!model.2 %in% c('null', 'model'))) %>%
filter(!(model.1 == 'model' & model.2 == 'null' | model.1 == 'null' & model.2 == 'model')) %>%
mutate(grouping = case_when(model.1 %in% c('null', 'model') ~ model.1,
TRUE ~ 'ML'))
library(betareg)
test_rankings
betareg(rbo ~ grouping, data = test_rankings)
rbo_beta <- betareg(rbo ~ grouping, data = test_rankings)
library(emmeans)
summary(rbo_beta)
anova(rbo_beta)
car::Anova(rbo_beta)
emmeans(rbo_beta, ~grouping)
emmeans(rbo_beta, ~grouping) %>%
contrast('pairwise')
ranking_similarities %>%
select(model.1, model.2, rbo, rbo_p, tau, tau_p) %>%
filter(!model.1 %in% c('knn', 'pls', 'median'),
!model.2 %in% c('knn', 'pls', 'median')) %>%
filter(model.1 > model.2) %>%
filter(!model.1 %in% c('model'),
!model.2 %in% c('model')) %>%
filter(model.1 != 'null',
model.2 != 'null') %>%
summarise(across(c(rbo, tau), c(~mean(.), ~sd(.) / sqrt(n()))))
emmeans(rbo_beta, ~grouping) %>%
contrast('pairwise')
emmeans(rbo_beta, ~grouping) %T>%
print %>%
contrast('pairwise')
tau_beta <- betareg(tau ~ grouping, data = test_rankings)
test_rankings
test_rankings <- ranking_similarities %>%
select(model.1, model.2, rbo, rbo_p, tau, tau_p) %>%
filter(!model.1 %in% c('knn', 'pls', 'median'),
!model.2 %in% c('knn', 'pls', 'median'),
model.1 != model.2) %>%
filter(model.1 %in% c('null', 'model') |
(model.1 > model.2 &
!model.1 %in% c('null', 'model') &
!model.2 %in% c('null', 'model'))) %>%
filter(!(model.1 == 'model' & model.2 == 'null' | model.1 == 'null' & model.2 == 'model')) %>%
mutate(grouping = case_when(model.1 %in% c('null', 'model') ~ model.1,
TRUE ~ 'ML')) %>%
mutate(tau = if_else(tau < 0, 1/100, tau))
tau_beta <- betareg(tau ~ grouping, data = test_rankings)
car::Anova(rbo_beta)
car::Anova(tau_beta)
emmeans(tau_beta, ~grouping) %T>%
print %>%
contrast('pairwise')
rbo_beta <- betareg(rbo ~ grouping, data = test_rankings)
car::Anova(rbo_beta)
emmeans(rbo_beta, ~grouping) %T>%
print %>%
contrast('pairwise')
